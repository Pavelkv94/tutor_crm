// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Admin {
  id          Int      @id @default(autoincrement())
  name        String
  telegram_id Int
  created_at  DateTime @default(now())

	@@map("admin")
}

model Student {
  id         Int        @id @default(autoincrement())
  name       String
  class      Int
  birth_date DateTime
	balance    Int @default(0)
	notifyAboutBirthday Boolean @default(true)
	notifyAboutLessons Boolean @default(true)
	bookUntilCancellation Boolean @default(false)
  created_at DateTime   @default(now())

  telegrams  Telegram[]
  lessons    Lesson[]
	telegram_tokens TelegramToken[]

	deleted_at DateTime?

	@@map("student")
}

model Telegram {
  id          Int      @id @default(autoincrement())
  student_id  Int
  telegram_id String @unique
	username String?
	first_name String?
  type        TelegramType @default(STUDENT)
  created_at  DateTime @default(now())

  student     Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

	@@map("telegram")
}

model LessonNotification {
  id          Int      @id @default(autoincrement())
  lesson_id     Int
  notified_at   DateTime @default(now())
  
  lesson       Lesson   @relation(fields: [lesson_id], references: [id])

  @@unique([lesson_id]) // чтобы не было дубликатов
}

model TelegramToken {
	id Int @id @default(autoincrement())
	student_id Int
	token String @unique
	expired_at DateTime
	created_at DateTime @default(now())

	student     Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

	@@map("telegram_token")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  student_id  Int
  plan_id     Int
  start_date  DateTime
	status      LessonStatus @default(PENDING)
	comment     String?
	lesson_notifications LessonNotification[]
	payment_status Boolean @default(false)
	corrected_time DateTime
  created_at  DateTime @default(now())
	is_paid Boolean @default(false)
	is_regular Boolean @default(false)
	is_free Boolean @default(false)
	rescheduled_lesson_id Int?
	rescheduled_lesson_date DateTime?
	rescheduled_to_lesson_id Int?
	rescheduled_to_lesson_date DateTime?

  student     Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  plan        Plan     @relation(fields: [plan_id], references: [id])

	@@map("lesson")
}

model Plan {
  id            Int         @id @default(autoincrement())
  plan_type     PlanType
  plan_currency PlanCurrency
	plan_name     String
  duration      Int
	plan_price    Int
  created_at    DateTime    @default(now())

  lessons       Lesson[]

	@@map("plan")
}

enum TelegramType {
  STUDENT
  PARENT
}

enum PlanType {
  INDIVIDUAL
  PAIR
}

enum PlanCurrency {
  USD
  EUR
  PLN
	BYN
}

enum LessonStatus {
  PENDING
  COMPLETED
	MISSED
	RESCHEDULED
  CANCELLED
}